#include "Nodes/FroxConvertNods.h"
#include "Shared.h"
#include "FroxTypes.h"

#include "Frox/Frox/ComputeFlow.h"
#include "Frox/Frox/ConvertToComputeNode.h"

#define LOCTEXT_NAMESPACE "UCropNods"

/// ConvertTo
#if WITH_EDITORONLY_DATA
void UConvertToOpartionNode::AllocateDefaultPins()
{
	Super::AllocateDefaultPins();

	UEdGraphPin* TypePin = CreatePin(EGPD_Input, UFroxNodeBase::PC_Property, FFroxTypeDefinition::EnumType, TEXT("Type"));
	TypePin->bAdvancedView = true;
	
	UEdGraphPin* AlphaPin = CreatePin(EGPD_Input, UFroxNodeBase::PC_Property, FFroxTypeDefinition::FloatType, TEXT("Alpha"));
	AlphaPin->DefaultValue = TEXT("1.0");
	AlphaPin->bAdvancedView = true;
	AlphaPin->AutogeneratedDefaultValue = TEXT("1.0");

	UEdGraphPin* BetaPin = CreatePin(EGPD_Input, UFroxNodeBase::PC_Property, FFroxTypeDefinition::FloatType, TEXT("Beta"));
	BetaPin->DefaultValue = TEXT("1.0");
	BetaPin->bAdvancedView = true;

	if (ENodeAdvancedPins::NoPins == AdvancedPinDisplay)
	{
		AdvancedPinDisplay = ENodeAdvancedPins::Hidden;
	}
}
#endif

frox::ComputeNode* UConvertToOpartionNode::CreateFroxNode(frox::ComputeFlow* Flow) const
{
	check(Flow != nullptr);

	auto MakeNode = Flow->CreateNode<frox::ConvertToComputeNode>();
	check(MakeNode != nullptr);

	if (Type == EFroxTypeEnum::FTE_None)
	{
		UE_LOG(LogFrox, Error, TEXT("Type isn't set!"));
		return false;
	}

	frox::EComputeFrameType FroxType = UFroxComputeFrame::UETypeToFroxType(Type);
	check(FroxType != frox::EComputeFrameType::ECFT_None);

	MakeNode->SetType(FroxType);
	MakeNode->SetAlpha(Alpha);
	MakeNode->SetBeta(Beta);

	return MakeNode;
}

#undef LOCTEXT_NAMESPACE