#include "Nodes/FroxGaussianBlurNode.h"
#include "Shared.h"
#include "FroxTypes.h"

#include "Frox/Frox/ComputeFlow.h"
#include "Frox/Frox/GaussianBlurComputeNode.h"

#define LOCTEXT_NAMESPACE "UFroxGaussianBlurNode"

frox::EGaussianBlurBorderType UEBorderTypeToFroxBorderType(EGaussianBlurBorderType BorderType)
{
	switch (BorderType)
	{
	case EGaussianBlurBorderType::Constant:
		return frox::EGaussianBlurBorderType::Constant;
	case EGaussianBlurBorderType::Replicate:
		return frox::EGaussianBlurBorderType::Replicate;
	case EGaussianBlurBorderType::Reflect:
		return frox::EGaussianBlurBorderType::Reflect;
	case EGaussianBlurBorderType::Wrap:
		return frox::EGaussianBlurBorderType::Wrap;
	case EGaussianBlurBorderType::Reflect101:
		return frox::EGaussianBlurBorderType::Reflect101;
	case EGaussianBlurBorderType::Transparent:
		return frox::EGaussianBlurBorderType::Transparent;
	case EGaussianBlurBorderType::Default:
		return frox::EGaussianBlurBorderType::Default;
	case EGaussianBlurBorderType::Isolated:
		return frox::EGaussianBlurBorderType::Isolated;
	default:
		assert(false);
	}

	return frox::EGaussianBlurBorderType::Default;
}

#if WITH_EDITORONLY_DATA
void UFroxGaussianBlurNode::AllocateDefaultPins()
{
	Super::AllocateDefaultPins();

	UEdGraphPin* InPin = CreatePin(EGPD_Input, UFroxNodeBase::PC_Frame, TEXT("In"));
	UEdGraphPin* KernelSizePin = CreatePin(EGPD_Input, UFroxNodeBase::PC_Property, TEXT("KernelSize"));
	KernelSizePin->DefaultValue = TEXT("3 3");
	KernelSizePin->AutogeneratedDefaultValue = TEXT("3 3");

	UEdGraphPin* SigmaXPin = CreatePin(EGPD_Input, UFroxNodeBase::PC_Property, TEXT("SigmaX"));
	SigmaXPin->DefaultValue = TEXT("0");
	SigmaXPin->AutogeneratedDefaultValue = TEXT("0");

	UEdGraphPin* SigmaYPin = CreatePin(EGPD_Input, UFroxNodeBase::PC_Property, TEXT("SigmaY"));
	SigmaYPin->DefaultValue = TEXT("0");
	SigmaYPin->AutogeneratedDefaultValue = TEXT("0");

	CreatePin(EGPD_Output, UFroxNodeBase::PC_Frame, TEXT("Out"));
}
#endif

frox::ComputeNode* UFroxGaussianBlurNode::CreateFroxNode(frox::ComputeFlow* Flow) const
{
	check(Flow != nullptr);

	auto GaussianBlurComputeNode = Flow->CreateNode<frox::GaussianBlurComputeNode>();
	check(GaussianBlurComputeNode != nullptr);

	GaussianBlurComputeNode->SetKernelSize(frox::Size{uint32_t(KernelSize.X), uint32_t(KernelSize.Y) });
	GaussianBlurComputeNode->SetSigmaX(SigmaX);
	GaussianBlurComputeNode->SetSigmaY(SigmaY);
	GaussianBlurComputeNode->SetBorderType(UEBorderTypeToFroxBorderType(BorderType));

	return GaussianBlurComputeNode;
}

#undef LOCTEXT_NAMESPACE