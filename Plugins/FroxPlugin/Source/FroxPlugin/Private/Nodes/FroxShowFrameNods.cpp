#include "Nodes/FroxShowFrameNods.h"
#include "Shared.h"
#include "FroxTypes.h"

#include "Frox/Frox/ComputeFlow.h"
#include "Frox/Frox/ShowFrameNode.h"

#define LOCTEXT_NAMESPACE "UFroxShowFrameNods"

#if WITH_EDITORONLY_DATA
void UFroxShowFrameNode::AllocateDefaultPins()
{
	Super::AllocateDefaultPins();

	UEdGraphPin* InPin = CreatePin(EGPD_Input, UFroxNodeBase::PC_Frame, TEXT("In"));
	UEdGraphPin* ShowPin = CreatePin(EGPD_Input, UFroxNodeBase::PC_Property, TEXT("Show"));
	ShowPin->DefaultValue = TEXT("true");
	ShowPin->bAdvancedView = true;
	ShowPin->AutogeneratedDefaultValue = TEXT("true");

	if (ENodeAdvancedPins::NoPins == AdvancedPinDisplay)
	{
		AdvancedPinDisplay = ENodeAdvancedPins::Hidden;
	}
}
#endif

frox::ComputeNode* UFroxShowFrameNode::CreateFroxNode(frox::ComputeFlow* Flow) const
{
	check(Flow != nullptr);

	auto FroxNode = Flow->CreateNode<frox::ShowFrameNode>();
	check(FroxNode != nullptr);

	return FroxNode;
}

#if WITH_EDITORONLY_DATA
void UFroxShowFrameWithContoursNode::AllocateDefaultPins()
{
	Super::AllocateDefaultPins();

	UEdGraphPin* InPin = CreatePin(EGPD_Input, UFroxNodeBase::PC_Frame, TEXT("In"));
	UEdGraphPin* Contours = CreatePin(EGPD_Input, UFroxNodeBase::PC_Data, TEXT("Contours"));
	UEdGraphPin* Hierarchy = CreatePin(EGPD_Input, UFroxNodeBase::PC_Data, TEXT("Hierarchy"));

	UEdGraphPin* ShowPin = CreatePin(EGPD_Input, UFroxNodeBase::PC_Property, TEXT("Show"));
	ShowPin->DefaultValue = TEXT("true");
	ShowPin->bAdvancedView = true;
	ShowPin->AutogeneratedDefaultValue = TEXT("true");

	if (ENodeAdvancedPins::NoPins == AdvancedPinDisplay)
	{
		AdvancedPinDisplay = ENodeAdvancedPins::Hidden;
	}
}
#endif

frox::ComputeNode* UFroxShowFrameWithContoursNode::CreateFroxNode(frox::ComputeFlow* Flow) const
{
	check(Flow != nullptr);

	auto FroxNode = Flow->CreateNode<frox::ShowFrameWithContoursNode>();
	check(FroxNode != nullptr);

	return FroxNode;
}

#undef LOCTEXT_NAMESPACE